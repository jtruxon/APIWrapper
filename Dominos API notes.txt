Dominos API validation


Flask Restplus
SwaggerUI
self documenting
unit tests
docker container, size minimized
explanation via outputNotes.md
instructions via INSTRUCTIONS.md 
order validation / field validation
	- https://www.liquid-technologies.com/online-json-to-schema-converter
	- https://www.liquid-technologies.com/online-json-schema-validator
	- http://donofden.com/blog/2020/03/15/How-to-Validate-JSON-Schema-using-Python
speed testing / scaling comments
pip install manifest
parametrized lifecycle constants
	- validateOrder
	- throwErrors
	- orderMakeTime
	- employeeOvertime
	- preSortOrders

threadsafe


logging
	- errors, emit to smtp?
	- speed metrics logging

code comments, docstrings, Sphinx
mention authorization



challenges:
	employee shifts start & end
	employee should start a pie as soon as shift starts
	employee cannot start a pie that ends after their shift ends

edge cases:
	empty submission
	empty order list
	very long order list
	zero employees, or employee shifts start a long time after orders start
	employee shift ends before it starts



approach:
	sort orders chronologically
	sort employees chronologically by start time
	priority queue for employees
	cycle through employees, distribute pie, post employee with new priority, repeat
		on adding pie to employee, update employee 




compute requirements:
	N orders, M employees
	PriorityQueue - O(log(n)) insertion/extraction
	NlogM


memory requirements:
	N+M



questions:
	assume all times in GMT?


style guide:
	1http://adv-r.had.co.nz/Style.html



Get_Order_Processing_Times
        * convert dates to timestamp objects (staff, orders)
        * add staff to queue, key = startTime
        * sort orders (if not disabled)
        * while orders exist
                - pop order, pop staff member
                - if (startTime + order_cycle_time) > endTime, skip.  else:
                - order_completion = max(first_availability, order time) + order_cycle_time
                - order_duration = order_completion - order_placed
                - staff.first_availability += order_cycle_time
                - push staff member to queue
        * compile output


Goal:

	worker_file.py

		import myFlaskWrapper as wrapper

		Class Do_Stuff:
			pass

		wrapper.RegisterPostEndPoint( '/api/orders', Do_Stuff.worker_fn  )
		wrapper.RegisterGetEndPoint( '/api/orders', Do_Stuff.worker_fn  )
		flask_app = wrapper.serve(port="8080")

----


	Dockerfile


		... python, gunicorn, etc ...

		RUN pip install myflask-wrapper

		COPY app

		CMD gunicorn run flask_app

